Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = SELECT COUNT(*) FROM attribute
10000
ii. Business table = SELECT COUNT(*) FROM business
10000
iii. Category table = SELECT COUNT(*) FROM category
10000
iv. Checkin table = SELECT COUNT(*) FROM checkin
10000
v. elite_years table = SELECT COUNT(*) FROM elite_years
10000
vi. friend table = SELECT COUNT(*) FROM friend
10000
vii. hours table = SELECT COUNT(*) FROM hours
10000
viii. photo table = SELECT COUNT(*) FROM photo
10000
ix. review table = SELECT COUNT(*) FROM review
10000
x. tip table = SELECT COUNT(*) FROM tip
10000
xi. user table = SELECT COUNT(*) FROM user
10000


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = SELECT COUNT(DISTINCT id) FROM business
10000
ii. Hours = SELECT COUNT(DISINCT business_id) FROM hours
1562
iii. Category = SELECT COUNT(DISINCT business_id) FROM category
2643
iv. Attribute = SELECT COUNT(DISINCT business_id) FROM attribute
1115
v. Review = SELECT COUNT(DISINCT user_id), COUNT(DISTINCT business_id), COUNT(DISTINCT id) FROM review
user_id: 9581, business_id: 8090, id: 10000
vi. Checkin = SELECT COUNT(DISINCT business_id) FROM checkin
493
vii. Photo = SELECT COUNT(DISINCT business_id) FROM photo
6493
viii. Tip = SELECT COUNT(DISINCT user_id), COUNT(DISTINCT business_id) FROM tip
user_id: 537, business_id: 3979
ix. User = SELECT COUNT(DISINCT id) FROM user
10000
x. Friend = SELECT COUNT(DISINCT user_id) FROM friend
11
xi. Elite_years = SELECT COUNT(DISINCT user_id) FROM elite_years
2780
Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
SQL code used to arrive at answer:
	SELECT COUNT(*)
    FROM user
	WHERE id IS NULL
    OR name IS NULL
    OR review_count IS NULL
    OR yelping_since IS NULL
    OR funny IS NULL
	OR fans IS NULL
    OR cool IS NULL
	OR useful IS NULL
    OR average_stars IS NULL
    OR compliment_hot IS NULL
    OR compliment_more IS NULL
	OR compliment_plain IS NULL
    OR compliment_profile IS NULL
	OR compliment_photos IS NULL
    OR compliment_cute IS NULL
    OR compliment_list IS NULL
    OR compliment_note IS NULL
    OR compliment_cool IS NULL
    OR compliment_funny IS NULL
    OR compliment_writer IS NULL
    
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
		SELECT MIN(stars), MAX(stars), AVG(stars)
			FROM review

		min: 1		max: 5		avg: 3.7082
		
	ii. Table: Business, Column: Stars
		SELECT MIN(stars), MAX(stars), AVG(stars)
			FROM business
		min: 1		max: 5		avg: 6.6549

	iii. Table: Tip, Column: Likes
		SELECT MIN(likes), MAX(likes), AVG(likes)
			FROM tip
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
		SELECT MIN(count), MAX(count), AVG(count)
			FROM checkin
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
		SELECT MIN(review_count), MAX(review_count), AVG(review_count)
			FROM user
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	SELECT city, SUM(review_count) AS total_reviews
		FROM business
		GROUP BY city
		ORDER BY total_reviews DESC;
	
	Copy and Paste the Result Below:
+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
SELECT sum(review_count) AS total_reviews, stars
	FROM business
	WHERE city = 'Avon'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+---------------+-------+
| total_reviews | stars |
+---------------+-------+
|            10 |   1.5 |
|             6 |   2.5 |
|            88 |   3.5 |
|            21 |   4.0 |
|            31 |   4.5 |
|             3 |   5.0 |
+---------------+-------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT sum(review_count) AS total_reviews, stars
	FROM business
	WHERE city = 'Beachwood'
	GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
 total_reviews | stars |
+---------------+-------+
|             8 |   2.0 |
|             3 |   2.5 |
|            11 |   3.0 |
|             6 |   3.5 |
|            69 |   4.0 |
|            17 |   4.5 |
|            23 |   5.0 |
+---------------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT name, id, review_count
		FROM user
		ORDER BY review_count DESC
		LIMIT 3;
		
	Copy and Paste the Result Below:
+--------+------------------------+--------------+
| name   | id                     | review_count |
+--------+------------------------+--------------+
| Gerald | -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| Sara   | -3s52C4zL_DHRK0ULG6qtg |         1629 |
| Yuri   | -8lbUNlXVSoXqaRRiHiSNg |         1339 |
+--------+------------------------+--------------+		


8. Does posing more reviews correlate with more fans?
	No, there is no correlation. 

	Please explain your findings and interpretation of the results:
	SELECT name, review_count, fans
		FROM user
		ORDER BY fans DESC;
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)

The individuals previously identified as having the most reviews using the code in question 7 does not match the users identified as having the most fans within this query. While they do appear in the results, they are not at the top of the list, and some users with a lesser review count have more fans. Writing more reviews may make one more visible to gain fans, but does not necessarily guarantee an increased amount of fans.
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes; there are 1780 reviews containing the word "love" and only 232 reviews containing the word "hate".

	
	SQL code used to arrive at answer:
SELECT COUNT(*)
	FROM review
	WHERE text LIKE '%love%';

SELECT COUNT(*)
	FROM review
	WHERE text LIKE '%hate%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	SELECT fans, name
    	FROM user
   		ORDER BY fans DESC
    	LIMIT 10;
	
	Copy and Paste the Result Below:
+------+-----------+
| fans | name      |
+------+-----------+
|  503 | Amy       |
|  497 | Mimi      |
|  311 | Harald    |
|  253 | Gerald    |
|  173 | Christine |
|  159 | Lisa      |
|  133 | Cat       |
|  126 | William   |
|  124 | Fran      |
|  120 | Lissa     |
+------+-----------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
City Selection: Phoenix
Category: Food
2-3 Stars: 
SELECT c.category, b.city, b.stars, h.hours, b.review_count, b.name, b.postal_code
	FROM business b
	INNER JOIN category c ON
	b.id = c.business_id
	INNER JOIN hours h ON
	b.id = h.business_id
	WHERE b.city = 'Phoenix' 
	AND b.stars BETWEEN 2 AND 3
	AND c.category = 'Food';
----------+---------+-------+----------------------+--------------+-----------+-------------+
| category | city    | stars | hours                | review_count | name      | postal_code |
+----------+---------+-------+----------------------+--------------+-----------+-------------+
| Food     | Phoenix |   3.0 | Monday|5:00-20:00    |           52 | Starbucks | 85048       |
| Food     | Phoenix |   3.0 | Tuesday|5:00-20:00   |           52 | Starbucks | 85048       |
| Food     | Phoenix |   3.0 | Friday|5:00-20:00    |           52 | Starbucks | 85048       |
| Food     | Phoenix |   3.0 | Wednesday|5:00-20:00 |           52 | Starbucks | 85048       |
| Food     | Phoenix |   3.0 | Thursday|5:00-20:30  |           52 | Starbucks | 85048       |
| Food     | Phoenix |   3.0 | Sunday|5:00-20:00    |           52 | Starbucks | 85048       |
| Food     | Phoenix |   3.0 | Saturday|5:00-20:00  |           52 | Starbucks | 85048       |
+----------+---------+-------+----------------------+--------------+-----------+-------------+
	4-5 stars: 
SELECT c.category, b.city, b.stars, h.hours, b.review_count, b.name, b.postal_code
	FROM business b
	INNER JOIN category c ON
	b.id = c.business_id
	INNER JOIN hours h ON
	b.id = h.business_id
	WHERE b.city = 'Phoenix' 
	AND b.stars BETWEEN 4 AND 5
	AND c.category = 'Food';
+----------+---------+-------+-----------------------+--------------+----------------------------------------+-------------+
| category | city    | stars | hours                 | review_count | name                                   | postal_code |
+----------+---------+-------+-----------------------+--------------+----------------------------------------+-------------+
| Food     | Phoenix |   4.0 | Monday|11:00-22:00    |          431 | Bootleggers Modern American Smokehouse | 85028       |
| Food     | Phoenix |   4.0 | Tuesday|11:00-22:00   |          431 | Bootleggers Modern American Smokehouse | 85028       |
| Food     | Phoenix |   4.0 | Friday|11:00-22:00    |          431 | Bootleggers Modern American Smokehouse | 85028       |
| Food     | Phoenix |   4.0 | Wednesday|11:00-22:00 |          431 | Bootleggers Modern American Smokehouse | 85028       |
| Food     | Phoenix |   4.0 | Thursday|11:00-22:00  |          431 | Bootleggers Modern American Smokehouse | 85028       |
| Food     | Phoenix |   4.0 | Sunday|11:00-22:00    |          431 | Bootleggers Modern American Smokehouse | 85028       |
| Food     | Phoenix |   4.0 | Saturday|11:00-22:00  |          431 | Bootleggers Modern American Smokehouse | 85028       |
+----------+---------+-------+-----------------------+--------------+----------------------------------------+-------------+
i. Do the two groups you chose to analyze have a different distribution of hours?
There is only one business in each group; the lower rated business opens earlier, whereas the higher rated business opens significantly later. The higher rated business does also stay open 2 hours later into the evening.
ii. Do the two groups you chose to analyze have a different number of reviews?
 The lower rated business has very few reviews; Starbucks only has 52 reviews, whereas Bootleggers Modern American Smokehouse has 431.       
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
Therre is only one business in each group, so the data collected may not be enough to infer based on location; making inferences based on location may require looking at food category businesses with less than 2 stars, or expanding results to businesses in more categories. When only looking at this data, one might assume that businesses in the 85048 area code receive lower ratings; this assumption is not fair when only looking at one sample of data from that postal code.

SQL code used for analysis:

SELECT c.category, b.city, b.stars, h.hours, b.review_count, b.name, b.postal_code
	FROM business b
	INNER JOIN category c ON
	b.id = c.business_id
	INNER JOIN hours h ON
	b.id = h.business_id
	WHERE b.city = 'Phoenix' 
	AND b.stars BETWEEN 4 AND 5
	AND c.category = 'Food';
SELECT c.category, b.city, b.stars, h.hours, b.review_count, b.name, b.postal_code
	FROM business b
	INNER JOIN category c ON
	b.id = c.business_id
	INNER JOIN hours h ON
	b.id = h.business_id
	WHERE b.city = 'Phoenix' 
	AND b.stars BETWEEN 2 AND 3
	AND c.category = 'Food';
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
 The businesses that are open have more reviews.        
         
ii. Difference 2:
The only closed business is a Seafood category business; none of the open businesses are in the seafood category.       
         
         
SQL code used for analysis:
SELECT
	business.name, business.is_open, category.category, business.stars, hours.hours, business.review_count, business.postal_code
	FROM (business INNER JOIN category ON business.id = category.business_id) INNER JOIN hours on hours.business_id = category.business_id
	WHERE business.city = 'Phoenix' 
	GROUP BY name
	

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
Finding correlation between average stars and review count of a given user.      
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:                           
	Working in the service industry, a common sentiment I have heard is that 'only angry customers leave reviews'. 
	With this in mind, I hope to use data to determine whether or not this is true. 
	In order to achieve this analysis, I will need data on how many reviews a user left (review_count) as well as their average stars given in reviews (average_stars). 
	Once I determine the size of the sample, I may need to further narrow down the results; I can sort the data set by review_count, both ascending and descending, to see how the 25 reviewsers with the most reviews, and the 25 reviewers with the least reviews, rate businesses and if there is any correlation.
iii. Output of your finished dataset:
+--------------+---------------+
| review_count | average_stars |
+--------------+---------------+
|         2000 |           3.6 |
|         1629 |          3.42 |
|         1339 |          4.11 |
|         1246 |          3.14 |
|         1215 |          4.41 |
|         1153 |           4.4 |
|         1116 |          3.31 |
|         1039 |          3.71 |
|          968 |          4.05 |
|          930 |          3.69 |
|          904 |           3.6 |
|          864 |           4.0 |
|          862 |           4.1 |
|          861 |          3.36 |
|          842 |           4.1 |
|          836 |          3.47 |
|          834 |          3.68 |
|          813 |          4.09 |
|          775 |          3.83 |
|          754 |          3.62 |
|          702 |          3.66 |
|          696 |          3.27 |
|          694 |          3.89 |
|          676 |          3.31 |
|          675 |          4.06 |
+--------------+---------------+
(Output limit exceeded, 25 of 10000 total rows shown)
+--------------+---------------+
| review_count | average_stars |
+--------------+---------------+
|            0 |          2.62 |
|            0 |           4.2 |
|            0 |          4.03 |
|            0 |           5.0 |
|            0 |          3.95 |
|            0 |          3.28 |
|            0 |           5.0 |
|            0 |          3.95 |
|            0 |          2.99 |
|            1 |           5.0 |
|            1 |           1.0 |
|            1 |           1.0 |
|            1 |           4.0 |
|            1 |           5.0 |
|            1 |           4.0 |
|            1 |           5.0 |
|            1 |           5.0 |
|            1 |           5.0 |
|            1 |           5.0 |
|            1 |           1.0 |
|            1 |           5.0 |
|            1 |           5.0 |
|            1 |           5.0 |
|            1 |           5.0 |
|            1 |           2.0 |
+--------------+---------------+
(Output limit exceeded, 25 of 10000 total rows shown)


iv. Provide the SQL code you used to create your final dataset:
SELECT review_count, average_stars
	FROM user
	ORDER BY review_count ASC

SELECT review_count, average_stars
	FROM user
	ORDER BY review_count DESC